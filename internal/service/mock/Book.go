// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "online-book-store/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Book is an autogenerated mock type for the Book type
type Book struct {
	mock.Mock
}

// GetBook provides a mock function with given fields: ctx, id
func (_m *Book) GetBook(ctx context.Context, id string) (*model.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields: ctx
func (_m *Book) GetBooks(ctx context.Context) ([]model.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBook creates a new instance of Book. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Book {
	mock := &Book{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
